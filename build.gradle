buildscript {
	ext {
		kotlinVersion = '1.2.71'
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: "kotlin-jpa"
noArg { annotation("com.edoctor.api.util.NoArg") }

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.edoctor'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

ext['springBootAdminVersion'] = '2.1.1'
ext['springCloudVersion'] = 'Greenwich.RC1'

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-integration')
	implementation('org.springframework.boot:spring-boot-starter-websocket')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-tomcat')
	implementation('javax.servlet:jstl')
	implementation('org.apache.tomcat.embed:tomcat-embed-jasper')
	runtimeOnly('org.hsqldb:hsqldb')

	implementation('com.fasterxml.jackson.module:jackson-module-kotlin')

	implementation('de.codecentric:spring-boot-admin-starter-client')
	implementation('de.codecentric:spring-boot-admin-starter-server')

	implementation('org.apache.kafka:kafka-streams')
	implementation('org.springframework.kafka:spring-kafka')
	implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka')
	implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka-streams')

	// security
	implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.1.RELEASE')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

	implementation('org.springframework.cloud:spring-cloud-stream-reactive')

	compile ('io.github.microutils:kotlin-logging:1.6.22')

	implementation("org.hibernate:hibernate-core:5.2.12.Final")
	runtimeOnly('mysql:mysql-connector-java:8.0.14')

	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.projectlombok:lombok')

	implementation("com.google.code.gson:gson:2.8.2")


	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.cloud:spring-cloud-stream-test-support')
	testImplementation('org.springframework.kafka:spring-kafka-test')
	testImplementation('org.springframework.security:spring-security-test')

	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
